<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title></title>
  </head>
  <body>
    /*! \page getting_started Getting Started
    
    <hr size="2" width="100%">
    <h1>Contents &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
    </h1>
    
    <a href="#Quickstart">Quick Start</a><br>
    <a href="#Architecture">Architecture</a><br>
    <a href="#Hardware_and_Software_Requirements">Hardware and Software Requirements and Tools</a><br>
    <a href="#Installing_the_SDK"> Installing the SDK</a><br>
    <a href="#Setting_Up_Your_C_Development"> Setting up Your C++ Development
      Environment</a><br>
    <a href="#Run_the_Pipeline_Async_Sample">Run the Pipeline Async
      Sample</a><br>
    
    <h1><a name="Quickstart"></a>Quick Start</h1>
    To get started with the Intel&reg; RealSense&trade; SDK quickly, follow these steps:<br>
    <ol>
      <li><a href="#Installing_the_SDK">Install the SDK</a>.</li>
      <li><a href="#Setting_Up_Your_C_Development">Set up</a> your
        development environment.</li>
      <li>Verify setup by <a href="#Run_the_Pipeline_Async_Sample">running the Pipeline Async sample</a>.</li>
    </ol>
    <p>To learn more about the SDK, read the other sections in this page and in the Developer's Guide.<br><br>
    </p>
    <h1><a name="Architecture"></a>Architecture</h1>
    \image html SDK_archs.PNG "Figure 1: Intel RealSense SDK for Linux Architecture"<br>
    As shown in Figure 1, the SDK consists of several layers:<br>
    <ul>
      <li>&nbsp;SDK Sample Applications</li>
    </ul>
    <blockquote>
      <ul>
        <li><b>Samples</b>: The SDK provides sample code to demonstrate
          the usage of the SDK APIs. The samples consist of simple code
          snippets, without any external features such as visualization,
          GUI, and rendering. The snippets
          represent most of the SDK API that is incorporated into
          customer applications.</li>
      </ul>
    </blockquote>
    <blockquote>
      <ul>
        <li><b>Tools</b>: The SDK provides tools as source code to
          demonstrate usages of the various SDK libraries. The tools may
          be used for application or SDK testing and validation.</li>
      </ul>
    </blockquote>
    <ul>
      <li>&nbsp;SDK Core</li>
    </ul>
    <blockquote>
      <ul>
        <li><b>Image data container</b>: The SDK provides an image
          container for raw image access and basic image processing
          services such as format conversion. It caches the processing 
		  output to optimize multiple
          requests of the same operation. The image container includes
          image metadata, which may be used by any pipeline component to
          attach additional data or computer vision (CV) module
          processing output to be used by other pipeline components. The
          SDK uses a correlated samples container to provide access to
          camera images and motion sensor samples from the relevant
          streams, which are time synchronized. The correlated samples
          container includes all relevant raw buffers, metadata, and
          information required to access the attached images. </li>
      </ul>
    </blockquote>
    <blockquote>
      <ul>
        <li><b>Spatial correlation and projection</b>: The SDK provides
          a library which executes spatial correlation and projection
          functions. </li>
      </ul>
    </blockquote>
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; The library provides the
    following facilities:<br>
    <blockquote>
      <blockquote>
        <ul>
          <li>Mapping of depth image to color image pixels, and mapping
            of color to depth.</li>
          <li>Projection and unprojection from depth or color image
            pixels to and from world coordinates.</li>
          <li>Creation of full images:</li>
        </ul>
      </blockquote>
    </blockquote>
    <blockquote>
      <blockquote>
        <blockquote>
          <ul>
            <li>UV map (depth to color)</li>
          </ul>
          <ul>
            <li>Inverse UV map (color to depth)</li>
          </ul>
          <ul>
            <li>Point cloud (same resolution as the depth stream)</li>
          </ul>
          <ul>
            <li>Color mapped to depth and depth mapped to color (same
              resolution as the corresponding stream)</li>
          </ul>
        </blockquote>
      </blockquote>
    </blockquote>
    <blockquote>
      <ul>
        <li><b>Pipeline framework</b>: The SDK provides a pipeline
          framework, to expose a simpler developer API with focus on CV
          outputs, and hide the details of creating and running the
          application pipeline of the cameras and CV modules. The
          framework loads CV modules according to API configuration,
          aggregates modality requirements from the camera, and
          configures the camera with the selected profile to satisfy all
          loaded modalities. The framework executes the main loop of
          streaming from the camera and triggering the modalities.</li>
      </ul>
    </blockquote>
   <ul>
      <li>Utilities: This library includes utilities, which can
        be used by SDK components and SDK applications.</li>
    </ul>
    <ul>
      <li>Camera modules: The SDK provides recording and playback
        modules for application developer testing and validation. The
        modules are standalone utilities, which expose the camera API as
        defined by librealsense, and can replace the calls to the camera
        from the application.</li>
    </ul>
	<br>
    <a name="Hardware_and_Software_Requirements"></a>
    <h1>Hardware and Software Requirements and Tools</h1>
    <b>Compatible Devices</b>: Intel&reg; RealSense&trade; ZR300<br>
    <b>Compatible Platforms</b>: Ubuntu 16.04 x64 (GCC 5.4 toolchain)<br>
    <b>Supported Languages</b>: C++<br>
    
	
<h1><a name="Installing_the_SDK">Installing the SDK</a></h1>
    
Issue the following commands to install from source.

<b>Note</b>: Ensure that you have installed all necessary dependencies first.
<pre>
$ git clone http://github.com/IntelRealSense/realsense_sdk
$ cd realsense_sdk
$ mkdir build
$ cd build
$ cmake ..
$ make
$ sudo make install
</pre>
<h1><a name="Setting_Up_Your_C_Development"></a>Setting Up Your C++
      Development Environment</h1>
    All relevant dependencies for running an application over the SDK are
    installed by default during SDK packager installation. To
    successfully write and compile an application over the SDK you must
    install CMake:<br>
    <ul>
      <li>librealsense</li>
      <li>OpenCV 3.1 </li>
      <li>CMake</li>
      <li>OpenGL GLFW version 3 </li>
      <li>lz4</li>
      <li>Apache log4cxx -- optional. Needed only if the librealsense-logger-dev is installed.</li>
    </ul>
    <h1><a name="Run_the_Pipeline_Async_Sample"></a> Run the Pipeline
      Async Sample</h1>
    Running the Pipeline Async sample will help you make sure your
    development environment is set up properly.<br>
    
    Under the folder realsense_sdk/samples/src/pipeline_async_sample/,
    find the CmakeLists.txt, which can be used as reference for
    your application CmakeList and the main.cpp, which can be used as a
    reference to your application.<br>
    
    Writing an application over the SDK requires different steps for
    different IDEs. Following are instructions for Qt Creator and
    Eclipse.<br>
    
    <h2><a name="Qt_Creator_"></a>Qt Creator</h2>
    Qt Creator is a cross-platform C++, JavaScript, and QML IDE.<br>
    
    1. Download and install Qt Creator from the Ubuntu software center.<br>
    2. Open Qt creator.<br>
    3. Choose <b>Open Project</b>, and select the file pipeline_async_sample/CmakeLists.txt.<br>
    4. In the CMake wizard, choose the build directory.<br>
    5. In the Edit tab, locate the folder you chose and build the solution from there.<br>
    6. Run the pipeline_async_sample (main.cpp).<br>
    <br>
	
    <h2><a name="Eclipse"></a>Eclipse</h2>
    1. Install Eclipse by running the following command: <br>
	<pre>&nbsp;&nbsp;sudo apt-get install eclipse-cdt </pre>
    2. Open Eclipse.<br>
    3. Choose a workspace to work from.<br>
    4. From the terminal:<br>
    <blockquote>a. Create a folder for the project and a cmake folder to
      run from:<br>
    </blockquote>
    <blockquote>
          <pre>&nbsp;&nbsp;cd ~/workspaces</pre>
          <pre>&nbsp;&nbsp;mkdir someproject</pre>
		  <pre>&nbsp;&nbsp;mkdir cmake</pre>
    </blockquote>
    <blockquote>b. From the ~/workspaces/someproject/cmake folder, run
      the command:<br>
    </blockquote>
    <pre>&nbsp;&nbsp;&nbsp;&nbsp; cmake -G "Eclipse CDT4 - Unix Makefiles" ~/realsense_sdk </pre>
    Note: ~/realsense_sdk is the location of the realsense_sdk folder
    from the GitHub.<br>
    5. In Eclipse;<br>
    <blockquote>a. Select the command:<br>
      &nbsp;&nbsp;&nbsp; <b>File &gt; Import... &gt; General &gt;
        Existing Projects into Workspace</b>. <br>
      b. Check <b>Select root directory</b> and choose <b>~/workspaces/someproject/cmake</b>.
      Make sure <b>Copy projects into workspace</b> is NOT checked. <br>
      c. Click <b>Finish</b>.<br>
    </blockquote>
    6. In the Project Explorer windows, you will see the realse_sdk
    folder and you can build the solution from there. <br>
    &nbsp;
    <hr> */
  </body>
</html>
